/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2015 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2015 Sun Microsystems, Inc.
 */
package com.junichi11.netbeans.modules.github.issues.issue.ui;

import com.junichi11.netbeans.modules.github.issues.GitHubIssues;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Insets;
import javax.swing.Icon;
import javax.swing.JPanel;
import javax.swing.border.Border;
import org.openide.util.ImageUtilities;

/**
 *
 * @author junichi11
 */
public final class MergePanel extends JPanel {

    public static final String PROP_MERGE_CHANGED = "github.issues.confirm.merge"; // NOI18N
    private static final long serialVersionUID = 4232217025134323257L;
    private static final Icon GIT_MERGE_ICON = ImageUtilities.loadImageIcon("com/junichi11/netbeans/modules/github/issues/resources/git_merge_16.png", true); // NOI18N

    /**
     * Creates new form MergePanel
     */
    public MergePanel() {
        initComponents();
        init();
    }

    private void init() {
        mergePullRequestButton.setIcon(GIT_MERGE_ICON);
        mergePullRequestButton.setContentAreaFilled(false);
        mergePullRequestButton.setForeground(Color.WHITE);
        mergePullRequestButton.setBackground(GitHubIssues.GREEN_COLOR);
        mergePullRequestButton.setOpaque(true);
        confirmMergeButton.setIcon(GIT_MERGE_ICON);
        confirmMergeButton.setContentAreaFilled(false);
        confirmMergeButton.setBackground(GitHubIssues.GREEN_COLOR);
        confirmMergeButton.setForeground(Color.white);
        confirmMergeButton.setOpaque(true);

        commitMessageScrollPane.setVisible(false);
        commitMessageTextArea.setVisible(false);
        confirmMergeButton.setVisible(false);
        cancelButton.setVisible(false);
    }

    public void setMergeButtonEnabled(boolean isEnabled) {
        mergePullRequestButton.setEnabled(isEnabled);
    }

    public void toggleCommentVisible() {
        boolean toggle = mergePullRequestButton.isVisible();
        mergePullRequestButton.setVisible(!toggle);
        commitMessageScrollPane.setVisible(toggle);
        commitMessageTextArea.setVisible(toggle);
        confirmMergeButton.setVisible(toggle);
        cancelButton.setVisible(toggle);
    }

    public void setCommitMessage(String commitMessage) {
        commitMessageTextArea.setText(commitMessage);
    }

    public String getCommitMessage() {
        return commitMessageTextArea.getText();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mergePullRequestButton = new javax.swing.JButton();
        commitMessageScrollPane = new javax.swing.JScrollPane();
        commitMessageTextArea = new javax.swing.JTextArea();
        confirmMergeButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(mergePullRequestButton, org.openide.util.NbBundle.getMessage(MergePanel.class, "MergePanel.mergePullRequestButton.text")); // NOI18N
        mergePullRequestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergePullRequestButtonActionPerformed(evt);
            }
        });

        commitMessageTextArea.setColumns(20);
        commitMessageTextArea.setRows(5);
        commitMessageScrollPane.setViewportView(commitMessageTextArea);

        org.openide.awt.Mnemonics.setLocalizedText(confirmMergeButton, org.openide.util.NbBundle.getMessage(MergePanel.class, "MergePanel.confirmMergeButton.text")); // NOI18N
        confirmMergeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmMergeButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(MergePanel.class, "MergePanel.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(commitMessageScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mergePullRequestButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(confirmMergeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mergePullRequestButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(commitMessageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmMergeButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void confirmMergeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmMergeButtonActionPerformed
        firePropertyChange(PROP_MERGE_CHANGED, null, null);
        toggleCommentVisible();
    }//GEN-LAST:event_confirmMergeButtonActionPerformed

    private void mergePullRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergePullRequestButtonActionPerformed
        toggleCommentVisible();
    }//GEN-LAST:event_mergePullRequestButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        toggleCommentVisible();
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JScrollPane commitMessageScrollPane;
    private javax.swing.JTextArea commitMessageTextArea;
    private javax.swing.JButton confirmMergeButton;
    private javax.swing.JButton mergePullRequestButton;
    // End of variables declaration//GEN-END:variables

    private static class RoundedBorder implements Border {

        private final int radius;

        RoundedBorder(int radius) {
            this.radius = radius;
        }

        @Override
        public Insets getBorderInsets(Component c) {
            return new Insets(this.radius + 1, this.radius + 1, this.radius + 2, this.radius);
        }

        @Override
        public boolean isBorderOpaque() {
            return true;
        }

        @Override
        public void paintBorder(Component c, Graphics g, int x, int y, int width, int height) {
            g.drawRoundRect(x, y, width - 1, height - 1, radius, radius);
        }
    }
}
