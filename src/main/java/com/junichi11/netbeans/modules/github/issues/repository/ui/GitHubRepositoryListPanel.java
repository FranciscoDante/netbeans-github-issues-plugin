/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2014 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2014 Sun Microsystems, Inc.
 */
package com.junichi11.netbeans.modules.github.issues.repository.ui;

import java.awt.Component;
import java.awt.Dialog;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import org.eclipse.egit.github.core.Repository;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.util.NbBundle;

/**
 *
 * @author junichi11
 */
public class GitHubRepositoryListPanel extends javax.swing.JPanel {

    private static final long serialVersionUID = -6030255526517952671L;

    private final DefaultComboBoxModel<Repository> repositoryComboBoxModel = new DefaultComboBoxModel<>();

    /**
     * Creates new form GitHubRepositoryListPanel
     */
    private GitHubRepositoryListPanel(List<Repository> repositories) {
        initComponents();
        init(repositories);
    }

    private void init(List<Repository> repositories) {
        repositoryComboBoxModel.removeAllElements();
        for (Repository repository : repositories) {
            repositoryComboBoxModel.addElement(repository);
        }
        repositoryComboBox.setRenderer(new RepositoryListCellRenderer(repositoryComboBox.getRenderer()));
        repositoryComboBox.setModel(repositoryComboBoxModel);
    }

    @NbBundle.Messages({
        "GitHubRepositoryListPanel.title=Repositories"
    })
    public static Repository showDialog(List<Repository> repositories) {
        GitHubRepositoryListPanel panel = new GitHubRepositoryListPanel(repositories);
        DialogDescriptor dialogDescriptor = new DialogDescriptor(panel, Bundle.GitHubRepositoryListPanel_title(), true, DialogDescriptor.OK_CANCEL_OPTION, null, null);
        Dialog dialog = DialogDisplayer.getDefault().createDialog(dialogDescriptor);
        dialog.pack();
        dialog.setVisible(true);
        dialog.dispose();
        if (dialogDescriptor.getValue() == DialogDescriptor.OK_OPTION) {
            return panel.getSelectedRepository();
        }
        return null;
    }

    private Repository getSelectedRepository() {
        return (Repository) repositoryComboBox.getSelectedItem();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        repositoryComboBox = new javax.swing.JComboBox<Repository>();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(repositoryComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(repositoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Repository> repositoryComboBox;
    // End of variables declaration//GEN-END:variables

    private static class RepositoryListCellRenderer extends DefaultListCellRenderer {

        private static final long serialVersionUID = -8530867911076509797L;

        private final ListCellRenderer renderer;

        public RepositoryListCellRenderer(ListCellRenderer renderer) {
            this.renderer = renderer;
        }

        @Override
        public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            String text = " "; // NOI18N
            if (value instanceof Repository) {
                Repository repository = (Repository) value;
                text = repository.getName();
            }
            return renderer.getListCellRendererComponent(list, text, index, isSelected, cellHasFocus);
        }

    }
}
